<?php

/**
 * @file
 * Contains however_customizations.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function however_customizations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.however_customizations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom functionality for the However project.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function however_customizations_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Target the node edit forms for our volume content types
  if (in_array($form_id, ['node_however_volume_edit_form', 'node_however_volume_form', 
                           'node_how2_volume_edit_form', 'node_how2_volume_form'])) {
    
    // Get content type name for the message
    $example = '';
    if (strpos($form_id, 'however_volume') !== FALSE) {
      $example = 'How(ever) Volume 1';
    }
    else if (strpos($form_id, 'how2_volume') !== FALSE) {
      $example = 'How2 Volume 1';
    }
    
    // Make the title field disabled (not just readonly)
    $form['title']['widget'][0]['value']['#disabled'] = TRUE;
    
    // Add description to explain the auto-generation
    $form['title']['widget'][0]['value']['#description'] = t('This title is automatically generated based on the Volume Number. Example: @example', 
      ['@example' => $example]);
  }

  // Target the node edit forms for our article content types
  if (in_array($form_id, ['node_how_ever_article_edit_form', 'node_how_ever_article_form',
                          'node_how2_article_edit_form', 'node_how2_article_form'])) {
    // Gray out volume and issue number fields
    $form['field_volume_number']['widget'][0]['value']['#disabled'] = TRUE;
    $form['field_issue_number']['widget'][0]['value']['#disabled'] = TRUE;
    
    // Add helpful descriptions
    $form['field_volume_number']['widget'][0]['value']['#description'] = t('This will be set automatically from the referenced issue on save.');
    $form['field_issue_number']['widget'][0]['value']['#description'] = t('This will be set automatically from the referenced issue on save.');
  }

  // Target the node edit forms for our section content types
  if (in_array($form_id, ['node_how_ever_section_edit_form', 'node_how_ever_section_form',
                          'node_how2_section_edit_form', 'node_how2_section_form'])) {
    // Gray out volume and issue number fields
    $form['field_volume_number']['widget'][0]['value']['#disabled'] = TRUE;
    $form['field_issue_number']['widget'][0]['value']['#disabled'] = TRUE;
    
    // Add helpful descriptions
    $form['field_volume_number']['widget'][0]['value']['#description'] = t('This will be set automatically from the referenced issue on save.');
    $form['field_issue_number']['widget'][0]['value']['#description'] = t('This will be set automatically from the referenced issue on save.');
  }
  
  // Target the node edit forms for our issue content types
  if (in_array($form_id, ['node_journal_issue_edit_form', 'node_journal_issue_form', 
                          'node_how2_issue_edit_form', 'node_how2_issue_form'])) {
    
    // Gray out volume number field since it's auto-populated from volume reference
    $form['field_volume_number']['widget'][0]['value']['#disabled'] = TRUE;
    $form['field_volume_number']['widget'][0]['value']['#description'] = t('This will be set automatically from the referenced volume on save.');
    
    // Get content type name for the message
    $example = '';
    if (strpos($form_id, 'journal_issue') !== FALSE) {
      $example = 'How(ever) Volume 1 Issue 1';
    }
    else if (strpos($form_id, 'how2_issue') !== FALSE) {
      $example = 'How2 Volume 1 Issue 1';
    }
    
    // Make the title field disabled (not just readonly)
    $form['title']['widget'][0]['value']['#disabled'] = TRUE;
    
    // Add description to explain the auto-generation
    $form['title']['widget'][0]['value']['#description'] = t('This title is automatically generated based on the Volume and Issue Numbers. Example: @example', 
      ['@example' => $example]);
  }
}

/**
 * Validates volume node forms.
 */
function however_customizations_volume_form_validate($form, FormStateInterface $form_state) {
  // We don't need to validate anything here since we're making the field readonly
  // But this function is kept as a placeholder in case we need to add validation later
}

/**
 * Implements hook_entity_presave().
 * To update all nodes, run drush however:update-volume-numbers
 */
function however_customizations_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // Skip if this is being processed by our batch update
  if ($entity->getEntityTypeId() === 'node' && isset($entity->however_skip_presave)) {
    return;
  }
  
  // Auto-generate titles for volume content types
  if ($entity->getEntityTypeId() === 'node') {
    // Check if this is one of our volume content types
    if ($entity->bundle() === 'however_volume' || $entity->bundle() === 'how2_volume') {
      // Make sure volume number field exists and has a value
      if ($entity->hasField('field_volume_number') && !$entity->field_volume_number->isEmpty()) {
        // Get volume number
        $volume_number = $entity->field_volume_number->value;
        
        // Generate title based on content type
        if ($entity->bundle() === 'however_volume') {
          $entity->setTitle("How(ever) Volume {$volume_number}");
        }
        else if ($entity->bundle() === 'how2_volume') {
          $entity->setTitle("How2 Volume {$volume_number}");
        }
      }
    }
    
    // Check if this is one of our issue content types
    if ($entity->bundle() === 'journal_issue' || $entity->bundle() === 'how2_issue') {
      // Make sure volume number and issue number fields exist and have values
      if ($entity->hasField('field_volume_number') && !$entity->field_volume_number->isEmpty() && 
          $entity->hasField('field_issue_number') && !$entity->field_issue_number->isEmpty()) {
        
        // Get volume number and issue number
        $volume_number = $entity->field_volume_number->value;
        $issue_number = $entity->field_issue_number->value;
        
        // Generate title based on content type
        if ($entity->bundle() === 'journal_issue') {
          $entity->setTitle("How(ever) Volume {$volume_number} Issue {$issue_number}");
        }
        else if ($entity->bundle() === 'how2_issue') {
          $entity->setTitle("How2 Volume {$volume_number} Issue {$issue_number}");
        }
      }
    }
  }
  
  // Define content types and their field mappings
  $content_mappings = [
    'how2_issue' => [
      'reference_field' => 'field_volume_reference',
      'number_field' => 'field_volume_number',
    ],
    'journal_issue' => [
      'reference_field' => 'field_volume_reference',
      'number_field' => 'field_volume_number',
    ],
    'how_ever_article' => [
      'reference_field' => 'field_issue_reference', // references an issue
      'copy_fields' => [
        'field_volume_number' => 'field_volume_number',
        'field_issue_number' => 'field_issue_number',
      ],
    ],
    'how2_article' => [
      'reference_field' => 'field_issue_reference', // references an issue
      'copy_fields' => [
        'field_volume_number' => 'field_volume_number',
        'field_issue_number' => 'field_issue_number',
      ],
    ],
    'how_ever_section' => [
      'reference_field' => 'field_issue_reference', // references an issue
      'copy_fields' => [
        'field_volume_number' => 'field_volume_number',
        'field_issue_number' => 'field_issue_number',
      ],
    ],
    'how2_section' => [
      'reference_field' => 'field_issue_reference', // references an issue
      'copy_fields' => [
        'field_volume_number' => 'field_volume_number',
        'field_issue_number' => 'field_issue_number',
      ],
    ],
  ];
    
  // Check if this is one of our target content types
  if ($entity->getEntityTypeId() === 'node' && isset($content_mappings[$entity->bundle()])) {
    $mapping = $content_mappings[$entity->bundle()];
    
    // Check if reference field has a value
    if (!$entity->{$mapping['reference_field']}->isEmpty()) {
      
      // Get the referenced entity
      $referenced_entity = $entity->{$mapping['reference_field']}->entity;
      
      if ($referenced_entity) {
        
        // Handle single field copy (existing issues → volumes)
        if (isset($mapping['number_field'])) {
          if ($referenced_entity->hasField('field_volume_number') && 
              !$referenced_entity->field_volume_number->isEmpty()) {
            
            $volume_number = $referenced_entity->field_volume_number->value;
            $entity->{$mapping['number_field']}->value = $volume_number;
          }
        }
        
        // Handle multiple field copy (new articles & sections → issues)
        if (isset($mapping['copy_fields'])) {
          foreach ($mapping['copy_fields'] as $source_field => $target_field) {
            if ($referenced_entity->hasField($source_field) && 
                !$referenced_entity->{$source_field}->isEmpty()) {
              
              $field_value = $referenced_entity->{$source_field}->value;
              $entity->{$target_field}->value = $field_value;
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function however_customizations_preprocess_node(&$variables) {
  $node = $variables['node'];
  
  // Get navigation service
  $navigation_service = \Drupal::service('however_customizations.publication_navigation');
  
  // For volume content types
  $volume_types = ['however_volume', 'how2_volume'];
  if (in_array($node->bundle(), $volume_types)) {
    // Get previous and next volumes
    $navigation = $navigation_service->getVolumeNavigation($node);
    
    // Add navigation to variables
    $variables['volume_navigation'] = [
      'prev' => $navigation['prev'],
      'next' => $navigation['next'],
    ];
  }
  
  // For issue content types
  $issue_types = ['journal_issue', 'how2_issue'];
  if (in_array($node->bundle(), $issue_types)) {
    // Get previous and next issues
    $navigation = $navigation_service->getIssueNavigation($node);
    
    // Add navigation to variables
    $variables['issue_navigation'] = [
      'prev' => $navigation['prev'],
      'next' => $navigation['next'],
    ];
  }

  // For page_facsimiles content type
  if ($node->bundle() === 'page_facsimiles') {
    // Check the referenced issue to determine journal
    if ($node->hasField('field_issue_reference') && !$node->get('field_issue_reference')->isEmpty()) {
      $issue = $node->get('field_issue_reference')->entity;
      if ($issue) {
        $variables['journal_machine_name'] = ($issue->bundle() === 'journal_issue') ? 'however' : 'how2';
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 * 
 * Automatically creates a corresponding page_facsimiles node when a new
 * how2_issue or journal_issue is created. This ensures every issue has
 * a dedicated page for displaying its page facsimile images at the URL:
 * /[journal]/v[volume]/n[issue]/page-facsimiles
 */
function however_customizations_node_insert($node) {
  if (in_array($node->bundle(), ['how2_issue', 'journal_issue'])) {
    // Only create if the issue has the required fields
    if ($node->hasField('field_volume_number') && !$node->get('field_volume_number')->isEmpty() &&
        $node->hasField('field_issue_number') && !$node->get('field_issue_number')->isEmpty()) {
      
      // Extract data for the page facsimiles node
      $volume_number = $node->get('field_volume_number')->value;
      $issue_number = $node->get('field_issue_number')->value;
      $journal_name = ($node->bundle() === 'how2_issue') ? 'how2' : 'however';
      
      // Create the page facsimiles node
      $page_facsimiles = \Drupal\node\Entity\Node::create([
        'type' => 'page_facsimiles',
        'title' => ucfirst($journal_name) . " Volume {$volume_number} Issue {$issue_number}: Page Facsimiles",
        'field_issue_reference' => $node->id(),
        'field_volume_number' => $volume_number,
        'field_issue_number' => $issue_number,
        'field_journal_name' => $journal_name,
        'status' => 1, // Published
      ]);
      
      $page_facsimiles->save();
      
      \Drupal::logger('however_customizations')->info('Created page facsimiles node for @title', [
        '@title' => $node->getTitle(),
      ]);
    }
  }
}

/**
 * Implements hook_node_delete().
 * 
 * Automatically deletes the corresponding page_facsimiles node when a
 * how2_issue or journal_issue is deleted. This keeps the site clean by
 * removing orphaned page facsimile nodes that would no longer have
 * any content to display.
 */
function however_customizations_node_delete($node) {
  if (in_array($node->bundle(), ['how2_issue', 'journal_issue'])) {
    // Find any page_facsimiles nodes that reference this issue
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'page_facsimiles')
      ->condition('field_issue_reference', $node->id())
      ->accessCheck(FALSE);
    $facsimile_nids = $query->execute();
    
    if (!empty($facsimile_nids)) {
      // Load and delete the page facsimiles nodes
      $facsimile_nodes = \Drupal\node\Entity\Node::loadMultiple($facsimile_nids);
      foreach ($facsimile_nodes as $facsimile_node) {
        $facsimile_node->delete();
        
        \Drupal::logger('however_customizations')->info('Deleted page facsimiles node for @title', [
          '@title' => $node->getTitle(),
        ]);
      }
    }
  }
}
