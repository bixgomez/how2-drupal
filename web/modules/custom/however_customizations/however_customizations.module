<?php

/**
 * @file
 * Contains however_customizations.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function however_customizations_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.however_customizations':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom functionality for the However project.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function however_customizations_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Target the node edit forms for our volume content types
  if (in_array($form_id, ['node_however_volume_edit_form', 'node_however_volume_form', 
                           'node_how2_volume_edit_form', 'node_how2_volume_form'])) {
    
    // Make the title field read-only
    $form['title']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
    
    // Add description to the title field
    $content_type = '';
    $example = '';
    
    if (strpos($form_id, 'however_volume') !== FALSE) {
      $content_type = 'However Volume';
      $example = 'How(ever) Volume 1';
    }
    else if (strpos($form_id, 'how2_volume') !== FALSE) {
      $content_type = 'How(2) Volume';
      $example = 'How2 Volume 1';
    }
    
    $form['title']['widget'][0]['value']['#description'] = t('This title is automatically generated based on the volume number. Example: @example', 
      ['@example' => $example]);
    
    // Add a custom validation to enforce the correct format
    $form['#validate'][] = 'however_customizations_volume_form_validate';
  }
}

/**
 * Validates volume node forms.
 */
function however_customizations_volume_form_validate($form, FormStateInterface $form_state) {
  // We don't need to validate anything here since we're making the field readonly
  // But this function is kept as a placeholder in case we need to add validation later
}

/**
 * Implements hook_entity_presave().
 * To update all nodes, run drush however:update-volume-numbers
 */
function however_customizations_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // Skip if this is being processed by our batch update
  if ($entity->getEntityTypeId() === 'node' && isset($entity->however_skip_presave)) {
    return;
  }
  
  // Auto-generate titles for volume content types
  if ($entity->getEntityTypeId() === 'node') {
    // Check if this is one of our volume content types
    if ($entity->bundle() === 'however_volume' || $entity->bundle() === 'how2_volume') {
      // Make sure volume number field exists and has a value
      if ($entity->hasField('field_volume_number') && !$entity->field_volume_number->isEmpty()) {
        // Get volume number
        $volume_number = $entity->field_volume_number->value;
        
        // Generate title based on content type
        if ($entity->bundle() === 'however_volume') {
          $entity->setTitle("However Volume [{$volume_number}]");
        }
        else if ($entity->bundle() === 'how2_volume') {
          $entity->setTitle("How(2) Volume [{$volume_number}]");
        }
      }
    }
  }
  
  // Define content types and their field mappings
  $content_mappings = [
    'how2_issue' => [
      'reference_field' => 'field_volume_reference',
      'number_field' => 'field_volume_number',
    ],
    'journal_issue' => [
      'reference_field' => 'field_volume_reference',
      'number_field' => 'field_volume_number',
    ],
  ];
    
  // Check if this is one of our target content types
  if ($entity->getEntityTypeId() === 'node' && isset($content_mappings[$entity->bundle()])) {
    $mapping = $content_mappings[$entity->bundle()];
    
    // Check if reference field has a value
    if (!$entity->{$mapping['reference_field']}->isEmpty()) {
      
      // Get the referenced volume entity
      $volume_reference = $entity->{$mapping['reference_field']}->entity;
      
      if ($volume_reference) {
        // Assuming the volume entity has a field called 'field_volume_number'
        if ($volume_reference->hasField('field_volume_number') && 
            !$volume_reference->field_volume_number->isEmpty()) {
          
          // Get the volume number from the referenced entity
          $volume_number = $volume_reference->field_volume_number->value;
          
          // Set the volume number on the current entity
          $entity->{$mapping['number_field']}->value = $volume_number;
        }
      }
    }
  }
}