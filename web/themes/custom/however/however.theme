<?php

use Drupal\node\Entity\NodeType;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Render\Markup;

/**
 * Add 'has-sidebar' class to html element when sidebar region has content.
 * Used for CSS layout adjustments.
 */
function however_preprocess_html(&$variables, $hook)
{
  if (!empty($variables['page']['sidebar'])) {
    $variables['attributes']['class'][] = 'has-sidebar';
  }
}

/**
 * Page-level preprocessing. Currently empty but available for future use.
 */
function however_preprocess_page(&$variables, $hook) {}

/**
 * Main node preprocessing dispatcher.
 * Calls specific functions based on node type and view mode if they exist.
 */
function however_preprocess_node(&$variables, $hook)
{
  $node = $variables['node'];

  // Try to call node-type-specific preprocessing function
  $function = __FUNCTION__ . '__' . $variables['node']->getType();
  if (function_exists($function)) {
    $function($variables, $hook);
  }

  // Try to call view-mode-specific preprocessing function
  $function = __FUNCTION__ . '__' . $variables['view_mode'];
  if (function_exists($function)) {
    $function($variables, $hook);
  }

  // Add section links for articles
  if (in_array($node->getType(), ['how2_article', 'how_ever_article'])) {
    // Debug: let's see what we're working with
    \Drupal::logger('however')->info('Looking for sections containing article ID: @nid', ['@nid' => $node->id()]);
    $variables['parent_sections'] = get_article_sections($node->id());
    \Drupal::logger('however')->info('Found @count sections', ['@count' => count($variables['parent_sections'])]);
 
  }
}

/**
 * Hide the title for contributor name nodes (they're used as inline references).
 */
function however_preprocess_node__contributor_name(&$variables, $hook)
{
  $variables['title_attributes']['class'][] = 'visually-hidden';
}

/**
 * Process How2 Issue nodes to extract and format volume/issue numbers.
 * Creates template variables: volume, issue, volume_issue, label.
 */
function however_preprocess_node__how2_issue(&$variables, $hook)
{
  $volume = null;

  // Extract volume number from volume reference field
  if (!empty($variables['node']->field_volume_reference) && !$variables['node']->field_volume_reference->isEmpty()) {
    $volume_reference = $variables['node']->field_volume_reference->entity;
    if ($volume_reference && $volume_reference->hasField('field_volume_number') && !$volume_reference->get('field_volume_number')->isEmpty()) {
      $volume_number = $volume_reference->get('field_volume_number')->value;
      $volume = 'vol. ' . $volume_number;
      $variables['volume'] = $volume;
    }
  }

  // Extract issue number from issue field
  $issue = null;
  if (!empty($variables['node']->field_issue_number) && !$variables['node']->field_issue_number->isEmpty()) {
    $issue_number = $variables['node']->field_issue_number->getValue();
    if (!empty($issue_number[0]['value'])) {
      $issue_number = $issue_number[0]['value'];
      $issue = 'no. ' . $issue_number;
      $variables['issue'] = $issue;
    }
  }

  // Create combined volume/issue string (handles cases where one might be missing)
  if (isset($volume) && isset($issue)) {
    $variables['volume_issue'] = $volume . ', ' . $issue;
  } elseif (isset($volume)) {
    $variables['volume_issue'] = $volume;
  } elseif (isset($issue)) {
    $variables['volume_issue'] = $issue;
  }

  // Add short description as a label if available
  if (!empty($variables['node']->field_short_description) && !$variables['node']->field_short_description->isEmpty()) {
    $label = $variables['node']->field_short_description->getValue();
    if (!empty($label[0]['value'])) {
      $variables['label'] = $label[0]['value'];
    }
  }
}

/**
 * Process How2 Section nodes.
 * Extracts volume/issue info from referenced issue and volume nodes.
 * Creates template variables: issue_pub_date, issue_url, issue, volume, volume_issue.
 */
function however_preprocess_node__how2_section(&$variables, $hook)
{
  // Get publication date and URL from referenced issue
  if (!empty($variables['node']->field_issue_reference) && !$variables['node']->field_issue_reference->isEmpty()) {
    $issue_node = $variables['node']->field_issue_reference->entity;

    // Extract publication date from issue
    if ($issue_node && $issue_node->hasField('field_publication_date_display') && !$issue_node->field_publication_date_display->isEmpty()) {
      $issue_pub_date = $issue_node->field_publication_date_display->value;
      $variables['issue_pub_date'] = $issue_pub_date;
    }

    // Get issue URL and number
    if ($issue_node) {
      $issue_url = $issue_node->toUrl()->toString();
      $variables['issue_url'] = $issue_url;

      // Extract issue number
      if ($issue_node->hasField('field_issue_number') && !$issue_node->field_issue_number->isEmpty()) {
        $issue_number = $issue_node->get('field_issue_number')->value;
        $issue = 'no. ' . $issue_number;
        $variables['issue'] = $issue;
      }
    }
  }

  // Extract volume number from volume reference
  $volume = null;
  if (!empty($variables['node']->field_volume_reference->getValue())) {
    $volume_number = $variables['node']->field_volume_reference->entity->get('field_volume_number')->value;
    $volume = 'vol. ' . $volume_number;
    $variables['volume'] = $volume;
  }

  // Create combined volume/issue string
  if (isset($volume) && isset($variables['issue'])) {
    $variables['volume_issue'] = $volume . ', ' . $variables['issue'];
  } elseif (isset($volume)) {
    $variables['volume_issue'] = $volume;
  } elseif (isset($variables['issue'])) {
    $variables['volume_issue'] = $variables['issue'];
  }
}

/**
 * Process How2 Article nodes.
 * Similar to sections - extracts volume/issue info from references.
 * In teaser view mode, also processes contributor names.
 */
function however_preprocess_node__how2_article(&$variables, $hook)
{
  // Get publication date and URL from referenced issue (same logic as sections)
  if (!empty($variables['node']->field_issue_reference) && !$variables['node']->field_issue_reference->isEmpty()) {
    $issue_node = $variables['node']->field_issue_reference->entity;

    // Extract publication date from issue
    if ($issue_node && $issue_node->hasField('field_publication_date_display') && !$issue_node->field_publication_date_display->isEmpty()) {
      $issue_pub_date = $issue_node->field_publication_date_display->value;
      $variables['issue_pub_date'] = $issue_pub_date;
    }

    // Get issue URL and number
    if ($issue_node) {
      $issue_url = $issue_node->toUrl()->toString();
      $variables['issue_url'] = $issue_url;

      // Extract issue number
      if ($issue_node->hasField('field_issue_number') && !$issue_node->field_issue_number->isEmpty()) {
        $issue_number = $issue_node->get('field_issue_number')->value;
        $issue = 'no. ' . $issue_number;
        $variables['issue'] = $issue;
      }
    }
  }

  // Extract volume number from volume reference
  $volume = null;
  if (!empty($variables['node']->field_volume_reference->getValue())) {
    $volume_number = $variables['node']->field_volume_reference->entity->get('field_volume_number')->value;
    $volume = 'vol. ' . $volume_number;
    $variables['volume'] = $volume;
  }

  // Create combined volume/issue string
  if (isset($volume) && isset($variables['issue'])) {
    $variables['volume_issue'] = $volume . ', ' . $variables['issue'];
  } elseif (isset($volume)) {
    $variables['volume_issue'] = $volume;
  } elseif (isset($variables['issue'])) {
    $variables['volume_issue'] = $variables['issue'];
  }

  // For teaser view mode, extract contributor names and format as comma-separated list
  if ($variables['view_mode'] == 'teaser') {
    if (!empty($variables['node']->field_person_bio->getValue())) {
      $contributors = array();
      foreach ($variables['node']->field_person_bio->getValue() as $contributor) {
        // Check if 'value' key exists in the contributor array
        if (isset($contributor['value'])) {
          $contributors[] = $contributor['value'];
        }
      }
      $contributors = implode(', ', $contributors);
      $variables['contributors'] = $contributors;
    }
  }
}

/**
 * Process How(ever) Article nodes.
 * Same logic as How2 articles but handles the different field structure.
 */
function however_preprocess_node__how_ever_article(&$variables, $hook)
{
  // Initialize variables to avoid undefined variable issues
  $issue_pub_date = null;
  $issue_url = null;
  $issue = null;

  // Get publication date and URL from referenced issue
  if (!empty($variables['node']->field_issue_reference) && !$variables['node']->field_issue_reference->isEmpty()) {
    $issue_node = $variables['node']->field_issue_reference->entity;

    // Extract publication date from issue
    if ($issue_node && $issue_node->hasField('field_publication_date_display') && !$issue_node->field_publication_date_display->isEmpty()) {
      $issue_pub_date = $issue_node->field_publication_date_display->value;
      $variables['issue_pub_date'] = $issue_pub_date;
    }

    // Get issue URL and number
    if ($issue_node) {
      $issue_url = $issue_node->toUrl()->toString();
      $variables['issue_url'] = $issue_url;

      // Extract issue number
      if ($issue_node->hasField('field_issue_number') && !$issue_node->field_issue_number->isEmpty()) {
        $issue_number = $issue_node->get('field_issue_number')->value;
        $issue = 'no. ' . $issue_number;
        $variables['issue'] = $issue;
      }
    }
  }

  // Extract volume number from volume reference (more defensive checking here)
  $volume = null;
  if (!empty($variables['node']->field_volume_reference) && !$variables['node']->field_volume_reference->isEmpty()) {
    $volume_reference = $variables['node']->field_volume_reference->entity;
    if ($volume_reference && $volume_reference->hasField('field_volume_number') && !$volume_reference->get('field_volume_number')->isEmpty()) {
      $volume_number = $volume_reference->get('field_volume_number')->value;
      $volume = 'vol. ' . $volume_number;
      $variables['volume'] = $volume;
    }
  }

  // Create combined volume/issue string
  if (isset($volume) && isset($issue)) {
    $variables['volume_issue'] = $volume . ', ' . $issue;
  } elseif (isset($volume)) {
    $variables['volume_issue'] = $volume;
  } elseif (isset($issue)) {
    $variables['volume_issue'] = $issue;
  }

  // For teaser view mode, process contributors (with additional safety checks)
  if ($variables['view_mode'] == 'teaser') {
    if (!empty($variables['node']->field_person_bio) && !$variables['node']->field_person_bio->isEmpty()) {
      $contributors = array();
      foreach ($variables['node']->field_person_bio->getValue() as $contributor) {
        if (isset($contributor['value'])) {
          $contributors[] = $contributor['value'];
        }
      }
      // Only set contributors variable if we actually found some
      if (!empty($contributors)) {
        $contributors = implode(', ', $contributors);
        $variables['contributors'] = $contributors;
      }
    }
  }
}

/**
 * Process How(ever) Journal Issue nodes.
 * Same volume/issue extraction logic as How2 issues.
 */
function however_preprocess_node__journal_issue(&$variables, $hook)
{
  $volume = null;

  // Extract volume number from volume reference
  if (!empty($variables['node']->field_volume_reference) && !$variables['node']->field_volume_reference->isEmpty()) {
    $volume_reference = $variables['node']->field_volume_reference->entity;
    if ($volume_reference && $volume_reference->hasField('field_volume_number') && !$volume_reference->get('field_volume_number')->isEmpty()) {
      $volume_number = $volume_reference->get('field_volume_number')->value;
      $volume = 'vol. ' . $volume_number;
      $variables['volume'] = $volume;
    }
  }

  // Extract issue number from issue field
  $issue = null;
  if (!empty($variables['node']->field_issue_number) && !$variables['node']->field_issue_number->isEmpty()) {
    $issue_number = $variables['node']->field_issue_number->getValue();
    if (!empty($issue_number[0]['value'])) {
      $issue_number = $issue_number[0]['value'];
      $issue = 'no. ' . $issue_number;
      $variables['issue'] = $issue;
    }
  }

  // Create combined volume/issue string
  if (isset($volume) && isset($issue)) {
    $variables['volume_issue'] = $volume . ', ' . $issue;
  } elseif (isset($volume)) {
    $variables['volume_issue'] = $volume;
  } elseif (isset($issue)) {
    $variables['volume_issue'] = $issue;
  }

  // Add short description as a label if available
  if (!empty($variables['node']->field_short_description) && !$variables['node']->field_short_description->isEmpty()) {
    $label = $variables['node']->field_short_description->getValue();
    if (!empty($label[0]['value'])) {
      $variables['label'] = $label[0]['value'];
    }
  }
}

/**
 * Get all sections that reference a given article.
 * 
 * @param int $article_nid
 *   The node ID of the article to search for.
 * 
 * @return array
 *   Array of loaded section node entities, or empty array if none found.
 */
function get_article_sections($article_nid) {
  // Find paragraphs that reference this article (both types)
  $paragraph_query = \Drupal::entityQuery('paragraph')
    ->condition('type', ['section_links', 'how2_section_links'], 'IN')
    ->condition('field_unit', $article_nid)
    ->accessCheck(FALSE);
  
  $paragraph_nids = $paragraph_query->execute();
  
  if (!$paragraph_nids) {
    return [];
  }
  
  $sections = [];
  
  // Find how_ever_sections that reference these paragraphs
  $section_query1 = \Drupal::entityQuery('node')
    ->condition('type', 'how_ever_section')
    ->condition('field_how_ever_piece', $paragraph_nids, 'IN')
    ->accessCheck(FALSE);
  
  // Find how2_sections that reference these paragraphs  
  $section_query2 = \Drupal::entityQuery('node')
    ->condition('type', 'how2_section')
    ->condition('field_how2_piece', $paragraph_nids, 'IN')
    ->accessCheck(FALSE);
  
  $section_nids = array_merge($section_query1->execute(), $section_query2->execute());
  
  if ($section_nids) {
    return \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($section_nids);
  }
  
  return [];
}

/**
 * Implements template_preprocess_paragraph() for journal_toc paragraphs.
 */
function however_preprocess_paragraph__journal_toc(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  
  // Get the selected journal type
  $journal_type = $paragraph->get('field_journal')->value;
  
  if ($journal_type === 'however') {
    // Query However volumes and issues
    $volume_type = 'however_volume';
    $issue_type = 'journal_issue';
    $volume_field = 'field_how_ever_issue';
  } elseif ($journal_type === 'how2') {
    // Query How2 volumes and issues
    $volume_type = 'how2_volume';
    $issue_type = 'how2_issue';
    $volume_field = 'field_how2_issue';
  } else {
    return;
  }
  
  // Get all volumes, sorted by volume number
  $volume_query = \Drupal::entityQuery('node')
    ->condition('type', $volume_type)
    ->condition('status', 1)
    ->sort('field_volume_number', 'ASC')
    ->accessCheck(TRUE);
  $volume_nids = $volume_query->execute();
  
  $volumes_with_issues = [];
  
  if ($volume_nids) {
    $volumes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($volume_nids);
    
    foreach ($volumes as $volume) {
      $volume_data = [
        'entity' => $volume,
        'title' => $volume->getTitle(),
        'url' => $volume->toUrl(),
        'issues' => []
      ];
      
      // Get referenced issues for this volume
      if ($volume->hasField($volume_field) && !$volume->get($volume_field)->isEmpty()) {
        $issue_references = $volume->get($volume_field)->referencedEntities();
        
        // Sort issues by issue number
        usort($issue_references, function($a, $b) {
          $a_num = $a->get('field_issue_number')->value ?? 0;
          $b_num = $b->get('field_issue_number')->value ?? 0;
          return $a_num - $b_num;
        });
        
        foreach ($issue_references as $issue) {
          if ($issue->isPublished()) {
            $volume_data['issues'][] = [
              'entity' => $issue,
              'title' => $issue->getTitle(),
              'url' => $issue->toUrl(),
            ];
          }
        }
      }
      
      $volumes_with_issues[] = $volume_data;
    }
  }
  
  $variables['journal_type'] = $journal_type;
  $variables['volumes'] = $volumes_with_issues;
}
